public static void remix(long[] a,int i)
{
	while(i>1)
	{
		if(a[i]<a[i/2])
		{
			long b=a[i];
			a[i]=a[i/2];
			a[i/2]=b;
			i=i/2;
		}else
		{
			break;
		}
	}
}
public static void delete(long[] a,int num)
{
	num--;
	a[1]=a[num];
	int i=1;
	int n=num-1;
	while(2*i<=n)
	{
		int j=2*i;
		if(j<n)
		{
			if(a[j]>a[j+1])
			{
				j++;
			}
			if(a[i]>a[j])
			{
				long c=a[i];
				a[i]=a[j];
				a[j]=c;
				i=j;
			}else
			{
				break;
			}
		}else if(j==n)
		{
			if(a[i]>a[j])
			{
				long c=a[i];
				a[i]=a[j];
				a[j]=c;
				i=j;
			}else
			{
				break;
			}
		}
	}
//	while(i<=n)
//	{
//		if(2*i<=n&&(2*i+1)<=n)
//		{
//			if(a[i].power<=a[2*i].power&&a[i].power<=a[2*i+1].power)
//			{
//				break;
//			}else if(a[i].power>a[2*i].power&&a[i].power>a[2*i+1].power)
//			{
//				if(a[2*i].power<a[2*i+1].power)
//				{
//					player c=a[i];
//					a[i]=a[2*i];
//					a[2*i]=c;
//					i=2*i;
//				}else
//				{
//					player c=a[i];
//					a[i]=a[2*i+1];
//					a[2*i+1]=c;
//					i=i*2+1;
//				}
//			}else if(a[i].power>a[2*i].power&&a[i].power<=a[2*i+1].power)
//			{
//				player c=a[i];
//				a[i]=a[2*i];
//				a[2*i]=c;
//				i=2*i;
//			}else if(a[i].power<=a[2*i].power&&a[i].power>a[2*i+1].power)
//			{
//				player c=a[i];
//				a[i]=a[2*i+1];
//				a[2*i+1]=c;
//				i=2*i+1;
//			}
//		}else if(2*i==n)
//		{
//			if(a[i].power>a[2*i].power)
//			{
//				player c=a[i];
//				a[i]=a[2*i+1];
//				a[2*i+1]=c;
//				i=2*i+1;
//			}else
//			{
//				break;
//			}
//		}else
//		{
//			break;
//		}
//	}
}
