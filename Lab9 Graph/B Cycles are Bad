import java.util.ArrayList;
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws IOException {
        Reader in=new Reader();
        PrintWriter out=new PrintWriter(System.out);
        int n = in.nextInt();
        int m = in.nextInt();
        Graph graph = new Graph(n);
        for (int i = 0; i < n; i++) {
            graph.insertVertex(i);
        }
        for (int i = 0; i < m; i++) {
            int u = in.nextInt();
            int v = in.nextInt();
            graph.insertEdge(u-1,v-1);
        }
        if (m>n-1){
            out.println("Bad");
            out.close();
            return;
        }
        if(graph.hasCircle()){
            out.println("Bad");
        }else{
            out.println("Good");
        }
        out.close();
    }


    static class Reader
    {
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public Reader(String file_name) throws IOException
        {
            din = new DataInputStream(new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String readLine() throws IOException
        {
            byte[] buf = new byte[64]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1)
            {
                if (c == '\n')
                    break;
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            }  while ((c = read()) >= '0' && c <= '9');

            if (neg)
                return -ret;
            return ret;
        }

        public long nextLong() throws IOException
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');
            if (neg)
                return -ret;
            return ret;
        }

        public double nextDouble() throws IOException
        {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();

            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');

            if (c == '.')
            {
                while ((c = read()) >= '0' && c <= '9')
                {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg)
                return -ret;
            return ret;
        }

        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }

        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }

        public void close() throws IOException
        {
            if (din == null)
                return;
            din.close();
        }
    }

}
class Vertex{
    private int val;
    private int index;
    ArrayList<Vertex> edges;
    public Vertex(int index){
        this.index = index;
        edges = new ArrayList<>();
    }

    public int getVal() {
        return val;
    }

    public void setVal(int val) {
        this.val = val;
    }

    public int getIndex() {
        return index;
    }

    public void setIndex(int index) {
        this.index = index;
    }

}

class Graph{
    private Vertex[] vertexList;//存储点的链表
    private int numOfEdges;
    public Graph(int n){
        vertexList = new Vertex[n];
        numOfEdges = 0;
    }

    //得到边的数目
    public int getNumOfEdges(){
        return numOfEdges;
    }

    //插入节点值
    public void insertVertex(int v){
        vertexList[v] = new Vertex(v);
    }

    //插入边
    public void insertEdge(int v1, int v2){
        vertexList[v1].edges.add(vertexList[v2]);
        vertexList[v2].edges.add(vertexList[v1]);
        numOfEdges++;
    }

    private boolean hasCircle(int[] visited, int[] father, int v) {
        visited[v] = 1;
        for (Vertex w : vertexList[v].edges) {
            int i = w.getIndex();
            if(i!=v){
                if(visited[i]==1){
                    if(father[v]!=i){
                        return true;
                    }else{
                        father[v] = -1;
                    }
                }else if(visited[i]==0){
                    father[i] = v;
                    hasCircle(visited, father, i);
                }
            }
        }
        visited[v] = 2;
        return false;
    }

    public boolean hasCircle(){
        int[] visited = new int[vertexList.length];
        for(int i = 0; i < vertexList.length; i++){
            visited[i] = 0;
        }
        int[] father = new int[vertexList.length];
        for(int i = 0; i < vertexList.length; i++){
            father[i] = -1;
        }
        for(int i = 0; i < vertexList.length; i++) {
            if (visited[i]==0) {
                if (hasCircle(visited, father, i)) {
                    return true;
                }
            }
        }
        return false;
    }
}

