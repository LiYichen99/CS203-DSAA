import java.io.*;

class Node {
    private int coefficient;
    private long exponent;
    Node next;

    public Node(int coefficient, long exponent) {
        this.coefficient = coefficient;
        this.exponent = exponent;
    }


    public int getCoefficient() {
            return coefficient;
        }

        public void setCoefficient(int coefficient) {
            this.coefficient = coefficient;
        }

        public long getExponent() {
            return exponent;
        }

        public void setExponent(long exponent) {
            this.exponent = exponent;
        }

    public static Node addNode(Node a, Node b) {
        return new Node(a.getCoefficient() + b.getCoefficient(), a.getExponent());
    }
        @Override
        public String toString() {
            if (getCoefficient() == 1) {
                if (getExponent() == 1) {
                    return "+x";
                } else if (getExponent() == 0) {
                    return "+1";
                } else {
                    return "+x^" + getExponent();
                }
            } else if (getCoefficient() == -1) {
                if (getExponent() == 1) {
                    return "-x";
                } else if (getExponent() == 0) {
                    return "-1";
                } else {
                    return "-x^" + getExponent();
                }
            } else if (getCoefficient() < 0) {
                if (getExponent() == 1) {
                    return getCoefficient() + "x";
                } else if (getExponent() == 0) {
                    return String.valueOf(getCoefficient());
                } else {
                    return getCoefficient() + "x^" + getExponent();
                }
            } else {
                if (getExponent() == 1) {
                    return "+" + getCoefficient() + "x";
                } else if (getExponent() == 0) {
                    return "+" + getCoefficient();
                } else {
                    return "+" + getCoefficient() + "x^" + getExponent();
                }
            }

        }

        public String toFirstString() {
            if (getCoefficient() == 1) {
                if (getExponent() == 1) {
                    return "x";
                } else if (getExponent() == 0) {
                    return "1";
                } else {
                    return "x^" + getExponent();
                }
            } else if (getCoefficient() == -1) {
                if (getExponent() == 1) {
                    return "-x";
                } else if (getExponent() == 0) {
                    return "-1";
                } else {
                    return "-x^" + getExponent();
                }
            } else if (getCoefficient() < 0) {
                if (getExponent() == 1) {
                    return getCoefficient() + "x";
                } else if (getExponent() == 0) {
                    return String.valueOf(getCoefficient());
                } else {
                    return getCoefficient() + "x^" + getExponent();
                }
            } else {
                if (getExponent() == 1) {
                    return getCoefficient() + "x";
                } else if (getExponent() == 0) {
                    return String.valueOf(getCoefficient());
                } else {
                    return getCoefficient() + "x^" + getExponent();
                }
            }

        }

}

class LinkedList{
    public LinkedList(){}
    private int count = 0;
    private Node first;
    private Node last;

    public int size(){
        return count;
    }
    public void add(Node node){
        if(count == 0){
            this.first = node;
        }else{
            this.last.next = node;
        }
        this.last = node;
        count++;
    }
    public Node getFirst(){
        return first;
    }
}


public class Main {

    public static void main(String[] args) throws IOException {
        Reader in=new Reader();
        PrintWriter out=new PrintWriter(System.out);
        int T = in.nextInt();
        for(int i = 0;i<T;i++){
            int n = in.nextInt();
            Node[] a = new Node[n];
            for(int j = 0;j<n;j++){
                int co = in.nextInt();
                long ex = in.nextLong();
                a[j] = new Node(co,ex);
            }
            int m = in.nextInt();
            Node[] b = new Node[m];
            for(int j = 0;j<m;j++){
                int co = in.nextInt();
                long ex = in.nextLong();
                b[j] = new Node(co,ex);
            }

            LinkedList c = additionPolynomials(a,b, n, m);
            if(c.size()==0){
                out.println("0");
            }else{
                Node node = c.getFirst();
                out.print(node.toFirstString());
                for(int j = 1; j<c.size(); j++){
                    node = node.next;
                    out.print(node.toString());
                }
                out.println();
            }
        }

        out.close();
    }

    public static LinkedList additionPolynomials(Node[] a, Node[] b,int n, int m){
        LinkedList c = new LinkedList();
        int i = 0;
        int j = 0;
        while (!(i>=n&&j>=m)){
            if(i<n){
                if(j<m){
                    if(a[i].getExponent()<b[j].getExponent()){
                        c.add(a[i]);
                        i++;
                    }else if(a[i].getExponent()>b[j].getExponent()){
                        c.add(b[j]);
                        j++;
                    }else{
                        if(Node.addNode(a[i],b[j]).getCoefficient()!=0){
                            c.add(Node.addNode(a[i],b[j]));
                        }
                        i++;
                        j++;
                    }
                }else{
                    c.add(a[i]);
                    i++;
                }
            }else{
                c.add(b[j]);
                j++;
            }

        }

        return c;
    }

    static class Reader
    {
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public Reader(String file_name) throws IOException
        {
            din = new DataInputStream(new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String readLine() throws IOException
        {
            byte[] buf = new byte[64]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1)
            {
                if (c == '\n')
                    break;
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            }  while ((c = read()) >= '0' && c <= '9');

            if (neg)
                return -ret;
            return ret;
        }

        public long nextLong() throws IOException
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');
            if (neg)
                return -ret;
            return ret;
        }

        public double nextDouble() throws IOException
        {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();

            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');

            if (c == '.')
            {
                while ((c = read()) >= '0' && c <= '9')
                {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg)
                return -ret;
            return ret;
        }

        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }

        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }

        public void close() throws IOException
        {
            if (din == null)
                return;
            din.close();
        }
    }

}
