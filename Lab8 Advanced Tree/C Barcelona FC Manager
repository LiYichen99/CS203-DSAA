import java.util.Scanner;

class PriorityQueue{
    int[] s;
    int size = 0;
    public PriorityQueue(int n){
        s = new int[n];
    }
    //加入元素
    //根最大
    //k:队列（最后一个）要插入的位置 node: 要插入的节点
    public void siftUp_max(int k, int node){
        while(k>0){
            int parent = s[(k-1)/2];
            if(parent>=node){
                break;
            }
            s[k] = parent;
            k = (k-1)/2;
        }
        s[k] = node;
    }
    public void insert_max(int node){
        s[size] = node;
        size++;
        siftUp_max(size-1,node);
    }
    //删除元素
    //k: 删除元素的位置 node: 队列的最后一个节点
    public void siftDown_max(int k, int node){
        if(size==0){
            return;
        }
        int parent = (size - 2) / 2;
        while (k <= parent) {
            int left = 2 * k + 1;
            if(left>=size){
                break;
            }
            int right = left + 1;
            //选择左右子节点中最大的
            int best = left;
            if (right < size && s[left] < s[right]) {
                best = right;
            }
            if (node >= s[best]) {
                break;
            }
            s[k] = s[best];
            k = best;
        }
        s[k] = node;

    }
    public int delete_max(){
        if(size==0){
            return -1;
        }
        int a = s[0];
        int node = s[size-1];
        s[size-1] = 0;
        size--;
        siftDown_max(0, node);
        return a;
    }

}

public class Main {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int T = in.nextInt();
        for (int i = 0; i < T; i++) {
            int n = in.nextInt();
            int[][] a = new int[n][2];
            for(int j = 0;j<n;j++){
                a[j][1] = in.nextInt();
            }
            for(int j = 0;j<n;j++){
                a[j][0] = in.nextInt();
            }
            a = mergeSort(a,n);
            long sum = 0;
            int index = a[0][0];
            PriorityQueue q = new PriorityQueue(n);
            for(int j = 0;j<n;j++){
                if (a[j][0] != index) {
                    for (int k = 0; k < index - a[j][0]; k++) {
                        int b = q.delete_max();
                        if(b==-1){
                            break;
                        }
                        sum+=b;
                    }
                    index = a[j][0];
                }
                q.insert_max(a[j][1]);
            }
            for(int k = index; k > 0; k--){
                int b = q.delete_max();
                if(b==-1){
                    break;
                }
                sum+=b;
            }
            System.out.println(sum);
        }
    }
    public static int[][] mergeSort(int[][] a, int n){
        if(n>1){
            int p = n/2;
            int[][] b = new int[p][2];
            int[][] c = new int[n-p][2];
            for(int i = 0;i<p;i++){
                b[i][0] = a[i][0];
                b[i][1] = a[i][1];
            }
            for(int i = 0;i<n-p;i++){
                c[i][0] = a[p+i][0];
                c[i][1] = a[p+i][1];
            }
            int[][] bb = mergeSort(b, b.length);
            int[][] cc = mergeSort(c, c.length);
            a = merge(bb,cc);
        }
        return a;
    }

    public static int[][] merge(int[][] b, int[][] c){
        int[][] a = new int[b.length+c.length][2];
        int i = 0;
        int j = 0;
        for(int k = 0;k<a.length;k++){
            if(i<b.length && (j>=c.length || b[i][0]>=c[j][0])){
                a[k][0] = b[i][0];
                a[k][1] = b[i][1];
                i++;
            }else{
                a[k][0] = c[j][0];
                a[k][1] = c[j][1];
                j++;
            }
        }
        return a;
    }

}
