import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;
import java.util.Stack;

public class Main {

    public static void main(String[] args) {
        TreeNode root=randomTree(777);
        preOrder_Iterative(root);
        System.out.println();
        preOrder_Recursive(root);
        System.out.println();
        postOrder_Iterative(root);
        System.out.println();
        postOrder_Recursive(root);
        System.out.println();
        inOrder_Iterative(root);
        System.out.println();
        inOrder_Recursive(root);

    }
    public static TreeNode randomTree(int n){
        Random random=new Random();
        if (n == 0)
            return null;

        TreeNode root = new TreeNode(random.nextInt(10000));

        int leftN = random.nextInt(n);

        root.setLeft(randomTree(leftN));
        root.setRight(randomTree(n - leftN - 1));

        return root;

    }
    // preorder traversal: root left right
    public static void preOrder_Recursive(TreeNode root){
        System.out.print(root.getVal()+" ");
        if(root.left!=null){
            preOrder_Recursive(root.left);
        }
        if(root.right!=null){
            preOrder_Recursive(root.right);
        }
    }
    public static void preOrder_Iterative(TreeNode root){
        Stack<TreeNode> s = new Stack<>();
        s.push(root);
        while(!s.isEmpty()){
            TreeNode node = s.pop();
            System.out.print(node.getVal()+" ");
            if(node.right!=null){
                s.push(node.right);
            }
            if(node.left!=null){
                s.push(node.left);
            }
        }
    }

    // postorder traversal: left right root
    public static void postOrder_Recursive(TreeNode root){
        if(root.left!=null){
            postOrder_Recursive(root.left);
        }
        if(root.right!=null){
            postOrder_Recursive(root.right);
        }
        System.out.print(root.getVal()+" ");
    }
    public static void postOrder_Iterative(TreeNode root){
        Stack<TreeNode> s = new Stack<>();
        s.push(root);
        TreeNode node = s.peek();
        while(node.left!=null){
            node = node.left;
            s.push(node);
        }
        TreeNode last = null; //记录访问过的右节点防止死循环
        while(!s.isEmpty()){
            node = s.peek();
            if(node.right == null||last == node.right){
                System.out.print(node.getVal()+" ");
                last = node;
                s.pop();
            }else{
                node = node.right;
                s.push(node);
                while(node.left!=null){
                    node = node.left;
                    s.push(node);
                }
            }
        }
    }

    // inorder traversal: left root right
    public static void inOrder_Recursive(TreeNode root){
        if(root.left!=null){
            inOrder_Recursive(root.left);
        }
        System.out.print(root.getVal()+" ");
        if(root.right!=null){
            inOrder_Recursive(root.right);
        }
    }
    public static void inOrder_Iterative(TreeNode root){
        Stack<TreeNode> s = new Stack<>();
        s.push(root);
        TreeNode node = s.peek();
        while(node.left!=null){
            node = node.left;
            s.push(node);
        }
        while(!s.isEmpty()){
            node = s.pop();
            System.out.print(node.getVal()+" ");
            if(node.right!=null){
                node = node.right;
                s.push(node);
                while(node.left != null){
                    node = node.left;
                    s.push(node);
                }
            }
        }
    }
    public static void levelTraversal(TreeNode root){
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            TreeNode node = q.poll();
            System.out.print(node.getVal()+" ");
            if(node.left!=null){
                q.offer(node.left);
            }
            if(node.right!=null){
                q.offer(node.right);
            }
        }
    }
    public static void depthOrderTraversal(TreeNode root){}

    // l1: pre中子树的起点 r1: pre中子树的终点 l2: in中子树的起点 r2: in中子树的终点
    public static TreeNode postOrder_from_preOrder_inOrder(int[] pre, int[] in, int l1, int r1, int l2, int r2){
        if(l2>r2){
            return null;
        }
        TreeNode root = new TreeNode(pre[l1]);
        int count = 0;
        int i;
        for( i = l2;in[i]!=pre[l1];i++){
            count++;
        }
        root.left = postOrder_from_preOrder_inOrder(pre, in, l1+1, l1+count, l2, i-1);
        root.right = postOrder_from_preOrder_inOrder(pre, in, l1+count+1, r1, i+1, r2);
        return root;
    }
    // l1: in中子树的起点 r1: in中子树的终点 l2: post中子树的起点 r2: post中子树的终点
    public static TreeNode preOrder_from_inOrder_postOrder(int[] in, int[] post, int l1, int r1, int l2, int r2){
        if(l1>r1){
            return null;
        }
        TreeNode root = new TreeNode(post[r2]);
        int count = 0;
        int i;
        for( i = l1;in[i]!=post[r2];i++){
            count++;
        }
        root.left = preOrder_from_inOrder_postOrder(in, post, l1, i-1, l2, l2+count-1);
        root.right = preOrder_from_inOrder_postOrder(in, post, i+1, r1, l2+count, r2-1);
        return root;
    }
    public static boolean isCompleteBinaryTree(TreeNode root){
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
            TreeNode node = q.poll();
            if(node.left!=null && node.right!=null){
                q.offer(node.left);
                q.offer(node.right);
            }else if(node.left==null && node.right!=null){
                return false;
            }else{
                if(node.left!=null){
                    q.offer(node.left);
                }
                while(!q.isEmpty()){
                    node = q.poll();
                    if(!(node.left==null && node.right==null)){
                        return false;
                    }
                }
            }
        }
        return true;
    }
}
class TreeNode{
    int val;
    TreeNode left;
    TreeNode right;
    public TreeNode(int val){
        this.val = val;
        left = null;
        right = null;
    }

    public void setLeft(TreeNode left) {
        this.left = left;
    }

    public void setRight(TreeNode right) {
        this.right = right;
    }

    public int getVal(){
        return val;
    }

}
