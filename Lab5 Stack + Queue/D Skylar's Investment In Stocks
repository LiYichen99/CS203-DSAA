import java.io.*;
import java.util.*;
class Node{
    int element;
    int index;
    public Node(int element, int index){
        this.element = element;
        this.index = index;
    }

    public int getElement() {
        return element;
    }

    public int getIndex() {
        return index;
    }
}

class Stack{
    Node[] a;
    int top = -1;
    int maxsize;
    public Stack(int n){
        a = new Node[n];
        maxsize = n;
    }
    public int size(){
        return top+1;
    }
    public void push(Node node){
        if(top<maxsize-2){
            top++;
            a[top] = node;
        }
    }
    public Node pop(){
        if(top>-1){
            Node node = a[top];
            a[top] = null;
            top--;
            return node;
        }else{
            return null;
        }
    }
    public Node peek(){
        if(top>-1){
            return a[top];
        }else{
            return null;
        }
    }
}

public class Main {

    public static void main(String[] args) throws IOException {
        Reader in=new Reader();
        PrintWriter out=new PrintWriter(System.out);
        int T = in.nextInt();
        for(int i = 0;i<T;i++){
            int n = in.nextInt();
            Stack a = new Stack(n);
            int[] b = new int[n];
            for(int j = 0;j<n;j++){
                int x = in.nextInt();
                while(a.size()>0 && a.peek().getElement()<x){
                    int index = a.pop().getIndex();
                    b[index] = j-index;
                }
                a.push(new Node(x,j));
            }
            while(a.size()>0){
                b[a.pop().getIndex()] = -1;
            }
            int q = in.nextInt();
            for(int j = 0;j<q;j++){
                int k = in.nextInt();
                out.println(b[k-1]);
            }
        }
        out.close();
    }


    static class Reader
    {
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public Reader(String file_name) throws IOException
        {
            din = new DataInputStream(new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String readLine() throws IOException
        {
            byte[] buf = new byte[64]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1)
            {
                if (c == '\n')
                    break;
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            }  while ((c = read()) >= '0' && c <= '9');

            if (neg)
                return -ret;
            return ret;
        }

        public long nextLong() throws IOException
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');
            if (neg)
                return -ret;
            return ret;
        }

        public double nextDouble() throws IOException
        {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();

            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');

            if (c == '.')
            {
                while ((c = read()) >= '0' && c <= '9')
                {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg)
                return -ret;
            return ret;
        }

        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }

        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }

        public void close() throws IOException
        {
            if (din == null)
                return;
            din.close();
        }
    }

}
