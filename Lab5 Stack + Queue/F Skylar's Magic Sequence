import java.io.*;
import java.util.*;
class Node{
    int element;
    int location;
    Node next;
    Node prev;
    public Node(int element, int location){
        this.element = element;
        this.location = location;
        prev = null;
        next = null;
    }
    public int getElement(){
        return element;
    }
    public int getLocation(){
        return location;
    }

}

class LinkedList{
    Node head;
    Node tail;
    int count = 0;
    public LinkedList(){
        head = new Node(-1,-1);
        tail = new Node(-1,-1);
        head.next = tail;
        tail.prev = head;
    }
    public void add(int a, int l){
        Node node = new Node(a, l);
        node.prev = tail.prev;
        node.next = tail;
        tail.prev.next = node;
        tail.prev = node;
        count++;
    }
    public void removeHead(){
        if(!isEmpty()){
            Node node = head.next;
            node.next.prev = head;
            head.next = node.next;
            node.next = null;
            node.prev = null;
            count--;
        }
    }
    public void removeTail(){
        if(!isEmpty()){
            Node node = tail.prev;
            node.prev.next = tail;
            tail.prev = node.prev;
            node.next = null;
            node.prev = null;
            count--;
        }
    }

    public Node getHead(){
        return head.next;
    }
    public Node getTail(){
        return tail.prev;
    }
    public boolean isEmpty(){
        return count==0;
    }
    public int size(){
        return count;
    }
}


public class Main {

    public static void main(String[] args) throws IOException {
        Reader in=new Reader();
        PrintWriter out=new PrintWriter(System.out);
        int k = in.nextInt();
        int n = in.nextInt();
        int a = in.nextInt();
        LinkedList min = new LinkedList();
        LinkedList max = new LinkedList();
        min.add(a,0);
        max.add(a,0);
        int length = 1;
        int index = 0;
        for(int i = 1;i<n;i++){
            a = in.nextInt();
            while(!max.isEmpty()&&max.getTail().getElement()<a){
                max.removeTail();
            }
            max.add(a,i);
            while(!min.isEmpty()&&min.getTail().getElement()>a){
                min.removeTail();
            }
            min.add(a,i);
            if(max.getHead().getElement()-min.getHead().getElement()>k){
                if(max.getHead().getLocation()<min.getHead().getLocation()){
                    index = max.getHead().getLocation()+1;
                    max.removeHead();
                }else{
                    index = min.getHead().getLocation()+1;
                    min.removeHead();
                }
            }
            if(i-index+1>length){
                length = i-index+1;
            }

        }
        out.println(length);
        out.close();
    }


    static class Reader
    {
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public Reader(String file_name) throws IOException
        {
            din = new DataInputStream(new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String readLine() throws IOException
        {
            byte[] buf = new byte[64]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1)
            {
                if (c == '\n')
                    break;
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            }  while ((c = read()) >= '0' && c <= '9');

            if (neg)
                return -ret;
            return ret;
        }

        public long nextLong() throws IOException
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');
            if (neg)
                return -ret;
            return ret;
        }

        public double nextDouble() throws IOException
        {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();

            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');

            if (c == '.')
            {
                while ((c = read()) >= '0' && c <= '9')
                {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg)
                return -ret;
            return ret;
        }

        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }

        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }

        public void close() throws IOException
        {
            if (din == null)
                return;
            din.close();
        }
    }

}
